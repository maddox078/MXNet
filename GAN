using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms.VisualStyles;

namespace MaddoxNet2
{
    public class GAN
    {
        public CNN Discriminator;
        public CNN Generator;
        public double[] CurrentSeed;
        //public int IterationCounter = 0;

        public GAN()
        {
            int[] ActivationIDs;
            int[] PoolingSched;
            int[] FilterCounts;
            int[] ANNLayerCnts;
            int[] ANNActivationIDs;
            int[] FilterDims;
            int A = 0;
            double ImageDims = 0;
            //int FilterDims = 5;

            ActivationIDs = new int[5];
            ActivationIDs[0] = 2;
            ActivationIDs[1] = 2;
            ActivationIDs[2] = 2;
            ActivationIDs[3] = 2;
            ActivationIDs[4] = 2;
            //ActivationIDs[5] = 2;

            PoolingSched = new int[5];
            PoolingSched[0] = 2;
            PoolingSched[1] = 2;
            PoolingSched[2] = 2;
            PoolingSched[3] = 2;
            PoolingSched[4] = 1;
            //PoolingSched[5] = 1;

            FilterCounts = new int[5];
            FilterCounts[0] = 20;
            FilterCounts[1] = 40;
            FilterCounts[2] = 50;
            FilterCounts[3] = 60;
            FilterCounts[4] = 70;
            //FilterCounts[5] = 70;

            FilterDims = new int[5];
            FilterDims[0] = 4;
            FilterDims[1] = 4;
            FilterDims[2] = 4;
            FilterDims[3] = 4;
            FilterDims[4] = 4;
            //FilterDims[5] = 4;

            ANNActivationIDs = new int[1];
            ANNActivationIDs[0] = 1;
            //ANNActivationIDs[1] = 1;
            //ANNActivationIDs[2] = 1;

            ImageDims = 80;
            A = 0;
            while (A < FilterCounts.Length)
            {
                ImageDims = ImageDims / PoolingSched[A];

                A++;
            }

            ImageDims = Math.Ceiling(ImageDims);
            
            ANNLayerCnts = new int[1];
            //ANNLayerCnts[0] = (int)(ImageDims * ImageDims * FilterCounts[FilterCounts.Length - 1]);
            ANNLayerCnts[0] = (int)(1);
            //ANNLayerCnts[2] = 1;


            Discriminator = new CNN(ActivationIDs, PoolingSched, FilterCounts, FilterDims, 80, ANNLayerCnts, ANNActivationIDs, 0.001);

            ActivationIDs = new int[4];
            ActivationIDs[0] = 2;
            ActivationIDs[1] = 2;
            ActivationIDs[2] = 2;
            ActivationIDs[3] = 2;

            PoolingSched = new int[4];
            PoolingSched[0] = 2;
            PoolingSched[1] = 2;
            PoolingSched[2] = 2;
            PoolingSched[3] = 2;

            FilterCounts = new int[3];
            FilterCounts[0] = 5;
            FilterCounts[1] = 5;
            FilterCounts[2] = 1;

            ANNActivationIDs = new int[3];
            ANNActivationIDs[0] = 3;
            ANNActivationIDs[1] = 3;
            ANNActivationIDs[2] = 1;

            FilterDims = new int[4];
            FilterDims[0] = 3;
            FilterDims[1] = 4;
            FilterDims[2] = 4;
            FilterDims[3] = 4;


            ImageDims = 32;
            A = 0;
            while (A < FilterCounts.Length)
            {
                ImageDims = (ImageDims + FilterDims[A] - 1) * PoolingSched[A];

                A++;
            }

            ImageDims = Math.Ceiling(ImageDims);

            ANNLayerCnts = new int[3];
            ANNLayerCnts[0] = (int)(1000);
            ANNLayerCnts[1] = (int)(ANNLayerCnts[0] * 1.5);
            ANNLayerCnts[2] = (int)(38 * 38 * 1);

            Generator = new CNN(ActivationIDs, PoolingSched, FilterCounts, FilterDims, 48, ANNLayerCnts, ANNActivationIDs, 0.0015);
        }

        public void GeneratorForwardPropagate(double[] Inputs)
        {
            double[][][] TempList;
            int A = 0;
            int B = 0;
            double TempVal = 0;

            this.CurrentSeed = Inputs;
            this.Generator.NeuralNet.NetInputs[0] = Inputs;
            //this.Generator.NeuralNet.ForwardPropagate(Inputs);

            A = 0;
            while (A < this.Generator.TransitionWeights.Length)
            {
                TempVal = 0;

                B = 0;
                while (B < this.Generator.TransitionWeights[A].Length)
                {
                    TempVal += (this.Generator.TransitionWeights[A][B] * Inputs[B]);

                    B++;
                }

                this.Generator.TransitionValues[A] = TempVal;

                A++;
            }

            TempList = this.ReshapeTensor(this.Generator.TransitionValues, this.Generator.Filters[0].Length);

            A = 0;
            while(A < this.Generator.Filters.Length)
            {
                if(A > 0)
                {
                    TempList = this.Generator.FeatureMaps[A - 1];
                    
                    
                }

                //TempList = this.Generator.DeConvolve(TempList, this.Generator.Filters[A], A, (this.Generator.Filters[A][0].Length - 1) * (this.Generator.PoolingSchedule[Math.Max(0, A - 1)]), false);
                TempList = this.Generator.TransposedConvolution3(TempList, this.Generator.Filters[A], A,TempList[0].Length * this.Generator.PoolingSchedule[A],this.Generator.Filters[A].Length,false, false);
                this.Generator.DerivativeFeatureMaps[A] = this.Generator.ActivateDerivativeConvolutions(TempList, this.Generator.ActivationFunctions[A]);
                this.Generator.NetFeatureMaps[A] = TempList;
                this.Generator.FeatureMaps[A] = this.Generator.ActivateConvolutions(TempList, this.Generator.ActivationFunctions[A]);

                A++;
            }
        }

        public void GeneratorBackPropagate(double[] Inputs,int OptimizerID,double DiscriminatorActivation)
        {
            int A = 0;
            int B = 0;
            int C = 0;
            int D = 0;
            int NeuronIndex;
            double[][][] LocalGradients;
            double[][][] NeuronGradients;
            double[][][] FilterGradients;
            double[][][] BackPropErrors = new double[0][][];
            double[] TempList;
            double[] FlattenedVals;
            double TempVal;

            this.GeneratorForwardPropagate(Inputs);

            A = this.Generator.Filters.Length - 1;
            while(A >= 0)
            {
                if(A == this.Generator.Filters.Length - 1)
                {
                    //NeuronGradients = this.Generator.TransposedConvolution3(this.Discriminator.ErrorMaps[0], this.Generator.Filters[A], 1, this.Generator.FeatureMaps[A][0].Length, this.Generator.FeatureMaps[A].Length, true, true);

                    NeuronGradients = this.Generator.CreateEmptyMapList(this.Generator.DerivativeFeatureMaps[this.Generator.DerivativeFeatureMaps.Length - 1][0].Length, this.Generator.DerivativeFeatureMaps[this.Generator.DerivativeFeatureMaps.Length - 1].Length,-1.0/DiscriminatorActivation);

                    NeuronGradients = this.MultiplyMapsByScalar(NeuronGradients, this.Discriminator.NeuralNet.Derivatives[this.Discriminator.NeuralNet.Derivatives.Length - 1][0]);
                    NeuronGradients = this.Generator.ElementWiseMultiply(NeuronGradients, this.Generator.DerivativeFeatureMaps[A]);


                    //NeuronGradients = this.MultiplyMapsByScalar(NeuronGradients, -(1.0 - (DiscriminatorActivation)));
                    //NeuronGradients = this.MultiplyMapsByScalar(NeuronGradients, -1.0 / (DiscriminatorActivation));
                    //NeuronGradients = this.MultiplyMapsByScalar(NeuronGradients, -this.Discriminator.NeuralNet.Derivatives[this.Discriminator.NeuralNet.Derivatives.Length - 1][0]);

                    //NeuronGradients = this.MultiplyMapsByScalar(this.Generator.DerivativeFeatureMaps[this.Generator.DerivativeFeatureMaps.Length - 1], -1.0/DiscriminatorActivation);
                    //NeuronGradients = this.Generator.ElementWiseMultiply(NeuronGradients, this.Generator.DerivativeFeatureMaps[this.Generator.DerivativeFeatureMaps.Length - 1]);
                    FilterGradients = this.Generator.TransposedConvolution3(this.Generator.FeatureMaps[A-1], NeuronGradients,A, this.Generator.Filters[A][0].Length, this.Generator.Filters[A].Length,true, true);
                    //FilterGradients = this.MultiplyMapsByScalar(FilterGradients, -1.0 / DiscriminatorActivation);
                    BackPropErrors = this.Generator.Convolve(NeuronGradients,this.Generator.Filters[A - 1],A, this.Generator.PoolingSchedule[A],0, true);
                }
                else
                {
                    NeuronGradients = BackPropErrors;

                    if (A == 0)
                    {
                        LocalGradients = new double[1][][];
                        LocalGradients = this.ReshapeTensor(this.Generator.TransitionValues, this.Generator.Filters[0].Length);
                        NeuronGradients = this.Generator.ElementWiseMultiply(NeuronGradients, this.Generator.DerivativeFeatureMaps[A]);
                        FilterGradients = this.Generator.TransposedConvolution3((LocalGradients), NeuronGradients,  A, this.Generator.Filters[A][0].Length, this.Generator.Filters[A].Length,true, true);
                        //NeuronGradients = this.PadLayerMaps(NeuronGradients,1,0.5);
                    }
                    else
                    {
                        NeuronGradients = this.Generator.ElementWiseMultiply(NeuronGradients, this.Generator.DerivativeFeatureMaps[A]);
                        FilterGradients = this.Generator.TransposedConvolution3(this.Generator.FeatureMaps[A - 1], NeuronGradients, A, this.Generator.Filters[A][0].Length, this.Generator.Filters[A].Length,true, true);
                        BackPropErrors = this.Generator.Convolve(NeuronGradients, this.Generator.Filters[A - 1], A,this.Generator.PoolingSchedule[A],0, true);
                    }
                }

                this.Generator.ErrorMaps[A] = NeuronGradients;

                B = 0;
                while(B < this.Generator.Filters[A].Length)
                {
                    C = 0;
                    while(C < this.Generator.Filters[A][B].Length)
                    {
                        D = 0;
                        while(D < this.Generator.Filters[A][B][C].Length)
                        {
                            switch(OptimizerID)
                            {
                                case 0:

                                    break;

                                case 1:                                   
                                    this.Generator.LastFilters[A][B][C][D] = (this.Generator.NeuralNet.RMSConst * this.Generator.LastFilters[A][B][C][D] + (1.0 - this.Generator.NeuralNet.RMSConst) * (Math.Pow(FilterGradients[B][C][D], 2)));
                                    TempVal = (this.Generator.NeuralNet.LearningRate * FilterGradients[B][C][D] / Math.Sqrt(this.Generator.LastFilters[A][B][C][D] + 0.000000001));
                                    this.Generator.Filters[A][B][C][D] += TempVal;

                                    this.Generator.DeltaMaps[A][B][C][D] = TempVal;

                                    break;
                                case 2:
                                    this.Generator.LastFilters[A][B][C][D] = (this.Generator.NeuralNet.B1 * this.Generator.LastFilters[A][B][C][D] + (1.0 - this.Generator.NeuralNet.B1) * FilterGradients[B][C][D]);/// (1.0 - Math.Pow(this.Generator.NeuralNet.B1, this.Generator.IterationCounter));
                                    this.Generator.LastFilters2[A][B][C][D] = (this.Generator.NeuralNet.B2 * this.Generator.LastFilters2[A][B][C][D] + (1.0 - this.Generator.NeuralNet.B2) * Math.Pow(FilterGradients[B][C][D], 2));/// (1.0 - Math.Pow(this.Generator.NeuralNet.B2, this.Generator.IterationCounter));
                                    TempVal = (this.Generator.NeuralNet.LearningRate * this.Generator.LastFilters[A][B][C][D] / (Math.Sqrt(this.Generator.LastFilters2[A][B][C][D]) + 0.00000000001));
                                    this.Generator.Filters[A][B][C][D] -= TempVal;

                                    this.Generator.DeltaMaps[A][B][C][D] = TempVal;

                                    break;
                            }

                            D++;
                        }

                        C++;
                    }

                    B++;
                }

                A--;
            }

            TempList = new double[this.Generator.NeuralNet.Activations[this.Generator.NeuralNet.Activations.Length - 1].Length];
            FlattenedVals = this.Flatten3DVector(this.Generator.ErrorMaps[0]);

            //A = 0;
            //while (A < this.Generator.NeuralNet.Activations[this.Generator.NeuralNet.Activations.Length - 1].Length)
            //{
            //    TempVal = 0;
            //    B = 0;
            //    while (B < FlattenedVals.Length)
            //    {
            //        TempVal += (FlattenedVals[B] * this.Generator.TransitionWeights[A][B]);

            //        B++;
            //    }

            //    TempList[A] = TempVal;

            //    A++;
            //}


                A = 0;
                while (A < this.Generator.FeatureMaps[0].Length)
                {
                    B = 0;
                    while (B < this.Generator.FeatureMaps[0][A].Length)
                    {
                        C = 0;
                        while (C < this.Generator.FeatureMaps[0][A][B].Length)
                        {
                        
                            NeuronIndex = (int)((A * Math.Pow(this.Generator.FeatureMaps[0][A].Length, 2)) + (B * this.Generator.FeatureMaps[0][A].Length) + C);

                            D = 0;
                            while (D < this.Generator.NeuralNet.Activations[this.Generator.NeuralNet.Activations.Length - 1].Length)
                            {

                                switch (OptimizerID)
                                    {
                                        case 0:

                                            break;

                                        case 1:
                                            this.Generator.LastTransitionWeights[NeuronIndex][D] = this.Generator.NeuralNet.RMSConst * this.Generator.LastTransitionWeights[NeuronIndex][D] + (1.0 - this.Generator.NeuralNet.RMSConst) * (Math.Pow((this.Generator.ErrorMaps[0][A][B][C] * this.Generator.DerivativeFeatureMaps[0][A][B][C] * Inputs[D]), 2));
                                            TempVal = (this.Generator.NeuralNet.LearningRate * (TempList[D] * this.Generator.DerivativeFeatureMaps[0][A][B][C] * this.CurrentSeed[D]) / Math.Sqrt(this.Generator.LastTransitionWeights[NeuronIndex][D] + 0.000000001));
                                            this.Generator.TransitionWeights[NeuronIndex][D] += TempVal;

                                            this.Generator.TransitionWeightsDeltas[NeuronIndex][D] = TempVal;

                                            break;

                                        case 2:
                                            this.Generator.LastTransitionWeights[NeuronIndex][D] = (this.Generator.LastTransitionWeights[NeuronIndex][D] * this.Generator.NeuralNet.B1 + (1.0 - this.Generator.NeuralNet.B1) * (this.Generator.ErrorMaps[0][A][B][C] * this.Generator.DerivativeFeatureMaps[0][A][B][C] * Inputs[D]));// / (1.0 - Math.Pow(this.Generator.NeuralNet.B1, this.Generator.IterationCounter));
                                            this.Generator.LastTransitionWeights2[NeuronIndex][D] = (this.Generator.LastTransitionWeights2[NeuronIndex][D] * this.Generator.NeuralNet.B2 + (1.0 - this.Generator.NeuralNet.B2) * Math.Pow(this.Generator.ErrorMaps[0][A][B][C] * this.Generator.DerivativeFeatureMaps[0][A][B][C] * Inputs[D], 2));// / (1.0 - Math.Pow(this.Generator.NeuralNet.B2, this.Generator.IterationCounter));
                                            TempVal = (this.Generator.NeuralNet.LearningRate * this.Generator.LastTransitionWeights[NeuronIndex][D] / (Math.Sqrt(this.Generator.LastTransitionWeights2[NeuronIndex][D]) + 0.000000001));
                                            this.Generator.TransitionWeights[NeuronIndex][D] -= TempVal;

                                            break;

                                    }


                                D++;
                            }

                            C++;
                        }

                        B++;
                    }

                    A++;
                }


            this.Generator.IterationCounter++;

            //this.Generator.NeuralNet.BackPropagate(this.CurrentSeed, TempList, OptimizerID, true, true, DiscriminatorActivation);
        }

        public double[][][] CropMaps(double[][][] Inputs, int NewMapDims)
        {
            int X = 0;
            double[][][] RetVal = new double[Inputs.Length][][];

            while (X < Inputs.Length)
            {
                RetVal[X] = CropMap(Inputs[X], NewMapDims);

                X++;
            }

            return RetVal;
        }

        public double[][][] PadLayerMaps(double[][][] InputLayerMaps, int PaddingSize, double InitVal = 0)
        {
            double[][][] RetVal = new double[InputLayerMaps.Length][][];
            int X = 0;

            while (X < InputLayerMaps.Length)
            {
                RetVal[X] = PadMap(InputLayerMaps[X], PaddingSize,InitVal);

                X++;
            }

            return RetVal;
        }

        public double[][] PadMap(double[][] InputMap, int PaddingSize,double InitVal = 0)
        {
            double[] TempList1;
            double[][] TempList2 = new double[InputMap.Length + (2 * PaddingSize)][];
            int X = 0;
            int Y = 0;

            while (X < InputMap.Length + (2 * PaddingSize))
            {
                TempList1 = new double[InputMap.Length + (2 * PaddingSize)];
                Y = 0;
                while (Y < InputMap.Length + (2 * PaddingSize))
                {
                    TempList1[Y] = InitVal;

                    Y++;
                }

                TempList2[X] = TempList1;

                X++;
            }

            X = 0;
            while (X < InputMap.Length)
            {
                Y = 0;
                while (Y < InputMap[X].Length)
                {
                    TempList2[X + PaddingSize][Y + PaddingSize] = InputMap[X][Y];

                    Y++;
                }

                X++;
            }

            return TempList2;
        }

        public double[][] CropMap(double[][] Inputs, int NewMapDims)
        {
            double[] TempList1;
            double[][] TempList2 = new double[NewMapDims][];
            int X = 0;
            int Y = 0;

            Y = 0;
            while (Y < NewMapDims)
            {
                TempList1 = new double[NewMapDims];
                X = 0;
                while (X < NewMapDims)
                {
                    if (Y >= Inputs.Length || X >= Inputs[Y].Length)
                    {
                        TempList1[X] = 0;
                    }
                    else
                    {
                        TempList1[X] = Inputs[Y][X];
                    }


                    X++;
                }

                TempList2[Y] = TempList1;

                Y++;
            }

            return TempList2;
        }

        public void GeneratorInitialize(int[] FeatureActivationIDs, int[] PoolingSched, int[] FilterCounts, int[] FilterDims, int ImageDims, int[] ANNLayerCounts, int[] ANNActivationIDs, double LearningRate)
        {
            int A = 0;
            int B = 0;
            int C = 0;
            int D = 0;
            double[] TempFilters1;
            double[][] TempFilters2;
            double[][][] TempFilters3;
            double[] TempFeatureMaps1;
            double[][] TempFeatureMaps2;
            double[][][] TempFeatureMaps3;
            double[] TempNetFeatureMaps1;
            double[][] TempNetFeatureMaps2;
            double[][][] TempNetFeatureMaps3;
            double[] TempDerivativeFeatureMaps1;
            double[][] TempDerivativeFeatureMaps2;
            double[][][] TempDerivativeFeatureMaps3;
            double[] TempDeltaMaps1;
            double[][] TempDeltaMaps2;
            double[][][] TempDeltaMaps3;
            double[] TempErrorMaps1;
            double[][] TempErrorMaps2;
            double[][][] TempErrorMaps3;
            double[] TempLastFilter1;
            double[][] TempLastFilter2;
            double[][][] TempLastFilter3;
            double[] TempLastFilter21;
            double[][] TempLastFilter22;
            double[][][] TempLastFilter23;
            double[] TempTransitionWeights;
            double[] TempTransitionWeightDeltas;
            double[] TempLastTransitionWeights;
            double[] TempLastTransitionWeights2;
            double TempImageDims = ImageDims;
            double TempPoolDims = ImageDims;
            Random Rnd = new Random(System.Guid.NewGuid().GetHashCode());

            this.Generator.PoolingSchedule = PoolingSched;
            this.Generator.ActivationFunctions = FeatureActivationIDs;
            this.Generator.NeuralNet = new ANN(ANNLayerCounts, ANNActivationIDs, LearningRate);
            this.Generator.FeatureMaps = new double[FilterCounts.Length][][][];
            this.Generator.NetFeatureMaps = new double[FilterCounts.Length][][][];
            this.Generator.DerivativeFeatureMaps = new double[FilterCounts.Length][][][];
            this.Generator.DeltaMaps = new double[FilterCounts.Length][][][];
            this.Generator.ErrorMaps = new double[FilterCounts.Length][][][];
            this.Generator.Filters = new double[FilterCounts.Length][][][];
            this.Generator.LastFilters = new double[FilterCounts.Length][][][];
            this.Generator.LastFilters2 = new double[FilterCounts.Length][][][];

            TempImageDims = ImageDims * PoolingSched[0];
            TempPoolDims = TempImageDims;

            while (A < FilterCounts.Length)
            {
                TempFeatureMaps3 = new double[FilterCounts[A]][][];
                TempNetFeatureMaps3 = new double[FilterCounts[A]][][];
                TempDerivativeFeatureMaps3 = new double[FilterCounts[A]][][];
                TempDeltaMaps3 = new double[FilterCounts[A]][][];
                TempErrorMaps3 = new double[FilterCounts[A]][][];
                TempFilters3 = new double[FilterCounts[A]][][];
                TempLastFilter3 = new double[FilterCounts[A]][][];
                TempLastFilter23 = new double[FilterCounts[A]][][];

                TempImageDims = TempImageDims;

                B = 0;
                while (B < FilterCounts[A])
                {
                    //Set up everything but filters
                    TempNetFeatureMaps2 = new double[(int)TempImageDims][];
                    TempDerivativeFeatureMaps2 = new double[(int)TempImageDims][];                    
                    TempErrorMaps2 = new double[(int)TempImageDims][];
                    TempFeatureMaps2 = new double[(int)TempImageDims][];

                    C = 0;
                    while (C < TempImageDims)
                    {
                        TempNetFeatureMaps1 = new double[(int)TempImageDims];
                        TempDerivativeFeatureMaps1 = new double[(int)TempImageDims];
                        TempErrorMaps1 = new double[(int)TempImageDims];
                        TempFeatureMaps1 = new double[(int)TempImageDims];

                        D = 0;
                        while (D < TempImageDims)
                        {
                            TempNetFeatureMaps1[D] = 0;
                            TempDerivativeFeatureMaps1[D] = 0;
                            TempErrorMaps1[D] = 0;
                            TempFeatureMaps1[D] = 0;

                            D++;
                        }

                        TempNetFeatureMaps2[C] = TempNetFeatureMaps1;
                        TempDerivativeFeatureMaps2[C] = TempDerivativeFeatureMaps1;
                        TempErrorMaps2[C] = TempErrorMaps1;
                        TempFeatureMaps2[C] = TempFeatureMaps1;

                        C++;
                    }

                    TempNetFeatureMaps3[B] = TempNetFeatureMaps2;
                    TempDerivativeFeatureMaps3[B] = TempDerivativeFeatureMaps2;
                    TempErrorMaps3[B] = TempErrorMaps2;
                    TempFeatureMaps3[B] = TempFeatureMaps2;

                    //Set up post pooling feature maps
                    TempPoolDims = (int)(TempImageDims * this.Generator.PoolingSchedule[A]);


                    //Set up filters
                    TempFilters2 = new double[FilterDims[A]][];
                    TempLastFilter2 = new double[FilterDims[A]][];
                    TempLastFilter22 = new double[FilterDims[A]][];
                    TempDeltaMaps2 = new double[FilterDims[A]][];

                    C = 0;
                    while (C < FilterDims[A])
                    {
                        TempFilters1 = new double[FilterDims[A]];
                        TempLastFilter1 = new double[FilterDims[A]];
                        TempLastFilter21 = new double[FilterDims[A]];
                        TempDeltaMaps1 = new double[FilterDims[A]];

                        D = 0;
                        while (D < FilterDims[A])
                        {
                            if(A == FilterDims.Length - 1)
                            {
                                TempFilters1[D] = (0.1 * (Math.Sqrt(-2.0 * Math.Log(1.0 - Rnd.NextDouble())) * Math.Cos(2.0 * Math.PI * (1.0 - Rnd.NextDouble()))));
                            }
                            else
                            {
                                TempFilters1[D] = (0.1 * (Math.Sqrt(-2.0 * Math.Log(1.0 - Rnd.NextDouble())) * Math.Cos(2.0 * Math.PI * (1.0 - Rnd.NextDouble()))));
                            }
                            

                            //TempFilters1[D] = Rnd.NextDouble() * 0.01;

                            TempLastFilter1[D] = 0;
                            TempLastFilter21[D] = 0;
                            TempDeltaMaps1[D] = 0;

                            D++;
                        }

                        TempFilters2[C] = TempFilters1;
                        TempLastFilter2[C] = TempLastFilter1;
                        TempLastFilter22[C] = TempLastFilter21;
                        TempDeltaMaps2[C] = TempDeltaMaps1;

                        C++;
                    }

                    TempFilters3[B] = TempFilters2;
                    TempLastFilter3[B] = TempLastFilter2;
                    TempLastFilter23[B] = TempLastFilter22;
                    TempDeltaMaps3[B] = TempDeltaMaps2;

                    B++;
                }

                this.Generator.FeatureMaps[A] = TempFeatureMaps3;
                this.Generator.NetFeatureMaps[A] = TempNetFeatureMaps3;
                this.Generator.DerivativeFeatureMaps[A] = TempDerivativeFeatureMaps3;
                this.Generator.ErrorMaps[A] = TempErrorMaps3;
                this.Generator.DeltaMaps[A] = TempDeltaMaps3;
                this.Generator.Filters[A] = TempFilters3;
                this.Generator.LastFilters[A] = TempLastFilter3;
                this.Generator.LastFilters2[A] = TempLastFilter23;

                TempImageDims = TempPoolDims;

                A++;
            }

        }

        public double[] Flatten3DVector(double[][][] Input)
        {
            //Normal: 2x63x63
            int X = 0;
            int Y = 0;
            int Z = 0;
            List<double> RetVal = new List<double>();
            double[] FinalRetVal;

            while (X < Input.Length)
            {
                Y = 0;
                while (Y < Input[X].Length)
                {
                    Z = 0;
                    while (Z < Input[X][Y].Length)
                    {
                        RetVal.Add(Input[X][Y][Z]);

                        Z++;
                    }

                    Y++;
                }

                X++;
            }

            FinalRetVal = new double[RetVal.Count];

            X = 0;
            while (X < RetVal.Count)
            {
                FinalRetVal[X] = RetVal[X];

                X++;
            }

            return FinalRetVal;
        }

        public void RedimGeneratorTransitionWeights()
        {
            int X = 0;
            int Y = 0;
            double[] TempDeltas1;
            double[][] TempDeltas2;
            double[] TempList1;
            double[][] TempList2;
            double[] TempList1Hist;
            double[][] TempList2Hist;
            double[] TempList1Hist2;
            double[][] TempList2Hist2;
            double[] TempList3;
            double Z1;
            double U1;
            double U2;
            Random Rnd = new Random(System.Guid.NewGuid().GetHashCode());

            //TempList3 = new double[this.Flatten3DVector(this.PadLayerMaps(this.Generator.FeatureMaps[0], (int)((this.Generator.Filters[0][0].Length - 1)/2))).Length];
            TempList3 = new double[this.Flatten3DVector(this.Generator.FeatureMaps[0]).Length];

            this.Generator.TransitionValues = new double[TempList3.Length];

            TempList2 = new double[TempList3.Length][];
            TempList2Hist = new double[TempList3.Length][];
            TempList2Hist2 = new double[TempList3.Length][];
            TempDeltas2 = new double[TempList3.Length][];

            while (X < TempList3.Length)
            {
                TempDeltas1 = new double[this.Generator.NeuralNet.Activations[this.Generator.NeuralNet.Activations.Length - 1].Length];
                TempList1 = new double[this.Generator.NeuralNet.Activations[this.Generator.NeuralNet.Activations.Length - 1].Length];
                TempList1Hist = new double[this.Generator.NeuralNet.Activations[this.Generator.NeuralNet.Activations.Length - 1].Length];
                TempList1Hist2 = new double[this.Generator.NeuralNet.Activations[this.Generator.NeuralNet.Activations.Length - 1].Length];
                Y = 0;
                while (Y < this.Generator.NeuralNet.Activations[this.Generator.NeuralNet.Activations.Length - 1].Length)
                {
                    U1 = 1.0 - Rnd.NextDouble();
                    U2 = 1.0 - Rnd.NextDouble();
                    Z1 = 0.125 * (Math.Sqrt(-2.0 * Math.Log(U1)) * Math.Cos(2 * Math.PI * U2));

                    TempList1[Y] = Z1;
                    TempList1Hist[Y] = 0;
                    TempList1Hist2[Y] = 0;
                    TempDeltas1[Y] = 0;

                    Y++;
                }

                TempList2[X] = TempList1;
                TempList2Hist[X] = TempList1Hist;
                TempList2Hist2[X] = TempList1Hist2;
                TempDeltas2[X] = TempDeltas1;

                X++;
            }

            this.Generator.TransitionWeights = TempList2;
            this.Generator.LastTransitionWeights = TempList2Hist;
            this.Generator.LastTransitionWeights2 = TempList2Hist2;
            this.Generator.TransitionWeightsDeltas = TempDeltas2;
        }


        public double[][] ExpandVector(double[] Input)
        {
            int Dims = (int)Math.Sqrt(Input.Length);
            double[][] FinalOutput = new double[Dims][];
            List<List<double>> Output = new List<List<double>>();
            List<double> SubOutput = new List<double>();
            double[] SubAry;
            double[] SubSubAry;
            int X = 0;
            int Y = 0;
            int Z = 0;


            //This needs to make an x y grid of rgbs
            while (Z < Input.Length)
            {
                X = 0;

                SubOutput.Add(Input[Z]);

                if ((Z + 1) % Dims == 0 && Z != 0)
                {
                    Output.Add(SubOutput);
                    SubOutput = new List<double>();
                }

                Z++;
            }

            FinalOutput = new double[Output.Count][];

            X = 0;
            while (X < Output.Count)
            {
                SubSubAry = new double[Output[X].Count];
                Y = 0;
                while (Y < Output[X].Count)
                {
                    SubSubAry[Y] = Output[X][Y];

                    Y++;
                }

                FinalOutput[X] = SubSubAry;

                X++;
            }

            return FinalOutput;
        }

        public double[][][] MultiplyMapsByScalar(double[][][] InputMaps, double Scalarval)
        {
            int X = 0;
            int Y = 0;
            int Z = 0;
            double[][][] TempList3 = new double[InputMaps.Length][][];
            double[][] TempList2;
            double[] TempList1;

            while (X < InputMaps.Length)
            {
                TempList2 = new double[InputMaps[X].Length][];
                Y = 0;
                while (Y < InputMaps[X].Length)
                {
                    TempList1 = new double[InputMaps[X][Y].Length];
                    Z = 0;
                    while (Z < InputMaps[X][Y].Length)
                    {
                        TempList1[Z] = InputMaps[X][Y][Z] * Scalarval;

                        Z++;
                    }

                    TempList2[Y] = TempList1;

                    Y++;
                }

                TempList3[X] = TempList2;

                X++;
            }


            return TempList3;
        }

        private double[][][] ReshapeTensor(double[] Input, int MapCount)
        {
            List<List<double>> TempMap = new List<List<double>>();
            List<List<List<double>>> Output = new List<List<List<double>>>();
            List<double> TempList = new List<double>();

            double[][][] FinalOutput;
            double[][] FinalTempMap;
            double[] FinalTempList;

            int X = 0;
            int Y = 0;
            int Z = 0;
            int MapDimensions = (int)Math.Sqrt((int)(Input.Length / MapCount));

            while (X < Input.Length)
            {
                if (X > 0 && X % MapDimensions == 0)
                {
                    TempMap.Add(TempList);
                    TempList = new List<double>();
                }

                if (TempMap.Count > 0 && TempMap.Count % MapDimensions == 0)
                {
                    Output.Add(TempMap);
                    TempMap = new List<List<double>>();
                }

                TempList.Add(Input[X]);

                X++;
            }

            while (TempList.Count < MapDimensions)
            {
                TempList.Add(0);
            }

            TempMap.Add(TempList);

            while (TempMap.Count < MapDimensions)
            {
                TempList = new List<double>();
                Y = 0;
                while (Y < MapDimensions)
                {
                    TempList.Add(0);

                    Y++;
                }

                TempMap.Add(TempList);
            }

            Output.Add(TempMap);

            FinalOutput = new double[Output.Count][][];
            X = 0;
            while (X < Output.Count)
            {
                FinalTempMap = new double[Output[X].Count][];
                Y = 0;
                while (Y < Output[X].Count)
                {
                    FinalTempList = new double[Output[X][Y].Count];
                    Z = 0;
                    while (Z < Output[X][Y].Count)
                    {
                        FinalTempList[Z] = Output[X][Y][Z];

                        Z++;
                    }

                    FinalTempMap[Y] = FinalTempList;

                    Y++;
                }

                FinalOutput[X] = FinalTempMap;

                X++;
            }

            return FinalOutput;
        }
    }
}
