using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;

namespace MaddoxNET
{
    public class ANN_Perf
    {
        public List<List<List<double>>> Weights = new List<List<List<double>>>();
        public List<List<List<double>>> PrevWeights = new List<List<List<double>>>();
        public List<List<double>> Activations = new List<List<double>>();
        public List<List<double>> NetInputs = new List<List<double>>();
        public List<List<double>> Errors = new List<List<double>>();
        public List<int> ActivationFunctions = new List<int>();
        public double LearningRate = 0;
        public double Momentum = 0;
        public double ReLUConst = 0.01;
        public double MeanSquaredError = 0;


        public ANN_Perf(List<int> LayerCounts,List<int> ActivationFunctions,int LossFunction,double LearningRate,double MomentumFactor)
        {
            int X = 0;
            int Y = 0;
            int Z = 0;
            List<double> LayerActivations = new List<double>();
            List<double> LayerNetInputs = new List<double>();
            List<double> LayerError = new List<double>();
            List<List<double>> LayerWeights = new List<List<double>>();
            List<double> NeuronWeights = new List<double>();
            List<List<double>> PrevLayerWeights = new List<List<double>>();
            List<double> PrevNeuronWeights = new List<double>();
            Random Rnd = new Random(System.DateTime.Now.Millisecond);

            this.ActivationFunctions = ActivationFunctions;
            this.LearningRate = LearningRate;
            this.Momentum = MomentumFactor;

            //Layer
            while(X < LayerCounts.Count)
            {
                //Neuron
                PrevLayerWeights = new List<List<double>>();
                LayerWeights = new List<List<double>>();
                LayerActivations = new List<double>();
                LayerNetInputs = new List<double>();
                LayerError = new List<double>();
                Y = 0;
                while(Y < LayerCounts[X])
                {
                    LayerActivations.Add(Rnd.NextDouble());
                    LayerNetInputs.Add(0);
                    LayerError.Add(0);

                    NeuronWeights = new List<double>();
                    PrevNeuronWeights = new List<double>();

                    //Dendrite
                    Z = 0;
                    while(Z < LayerCounts[Math.Max(0,X-1)])
                    {
                        NeuronWeights.Add(Rnd.NextDouble());
                        PrevNeuronWeights.Add(0);

                        Z++;
                    }



                    LayerWeights.Add(NeuronWeights);
                    PrevLayerWeights.Add(PrevNeuronWeights);

                    Y++;
                }

                this.Activations.Add(LayerActivations);
                this.NetInputs.Add(LayerNetInputs);
                this.Errors.Add(LayerError);
                this.Weights.Add(LayerWeights);
                this.PrevWeights.Add(PrevLayerWeights);

                X++;
            }
        }

        public double GetTotalError()
        {
            int X = 0;
            double RetVal = 0;

            while(X < this.Errors[this.Errors.Count - 1].Count)
            {
                RetVal += this.Errors[this.Errors.Count - 1][X];
                
                X++;
            }

            return RetVal;
        }

        public void ForwardPropagate(List<double> Inputs,int OutputNormalizationMethod)
        {
            int X = 0;
            int Y = 0;
            int Z = 0;
            double NetSignal = 0;

            while(X < this.Activations[0].Count)
            {
                if(X >= Inputs.Count)
                {
                    this.NetInputs[0][X] = 0;
                }
                else
                {
                    this.NetInputs[0][X] = Inputs[X];
                }

                //this.Activations[0][X] = Inputs[X];
                this.Activations[0][X] = this.ActivationFunction(this.NetInputs[0][X], this.ActivationFunctions[0]);

                X++;
            }

            //this.Activations[0] = this.NormalizeDataSet(this.Activations[0], 4);

            X = 1;
            while(X < this.Activations.Count)
            {
                Y = 0;
                while(Y < this.Activations[X].Count)
                {
                    NetSignal = 0;
                    Z = 0;
                    while(Z < this.Activations[Math.Max(0, X - 1)].Count)
                    {
                        NetSignal += this.Weights[X][Y][Z] * this.NetInputs[Math.Max(0,X-1)][Z];

                        Z++;
                    }

                    NetSignal /= Z;

                    this.NetInputs[X][Y] = NetSignal;
                    this.Activations[X][Y] = this.ActivationFunction(NetSignal, this.ActivationFunctions[X]);

                    Y++;
                }

                if(X == this.Activations.Count - 1)
                {
                    //this.Activations[X] = this.NormalizeDataSet(this.Activations[X], 4);
                }
                

                X++;
            }


            switch (OutputNormalizationMethod)
            {
                case 0:

                    break;

                case 1:
                    

                    break;

            }
        }

        public int GetActivationIndex()
        {
            int X = 0;
            int ActivationIndex = 0;
            double MaxActivation = this.Activations[2][0];

            while (X < this.Activations[2].Count)
            {
                if (Math.Abs(this.Activations[2][X]) > Math.Abs(MaxActivation))
                {
                    MaxActivation = this.Activations[2][X];
                    ActivationIndex = X;
                }

                X++;
            }

            return ActivationIndex;
        }

        double CalculateIntersectionOverUnion(double XA_1, double YA_1, double XA_2, double YA_2, double XB_1, double YB_1, double XB_2, double YB_2)
        {
            double RetVal = 0;
            double Intersect = 0;
            double Union = 0;
            double AreaA = 0;
            double AreaB = 0;

            AreaA = Math.Abs(XA_1 - XA_2) * Math.Abs(YA_1 - YA_2);
            AreaB = Math.Abs(XB_1 - XB_2) * Math.Abs(YB_1 - YB_2);

            Intersect = Math.Max(0, Math.Min(XA_1, XB_2) - Math.Max(XA_1, XB_1)) * Math.Max(0, Math.Min(YA_2, YB_2) - Math.Max(YA_1, YB_1));

            Union = AreaA + AreaB - Intersect;

            if(Intersect == 0)
            {
                return 0.000001;
            }

            return Intersect / Union;
        }


        public void BackPropagate(List<double> Inputs, List<double> Outputs,int OutputNormalizationMethod, bool TrainWeights)
        {
            int X = 0;
            int Y = 0;
            int Z = 0;
            double Delta = 0;
            double MSE = 0;

            this.ForwardPropagate(Inputs,OutputNormalizationMethod);

            X = 0;
            while(X < this.Activations[this.Activations.Count - 1].Count)
            {
                MSE += Math.Pow(Outputs[X] * this.Activations[this.Activations.Count - 1][X],2);

                X++;
            }

            MSE /= this.Activations[this.Activations.Count - 1].Count;
            //MSE = Math.Sqrt(MSE);

            this.MeanSquaredError = MSE;

            X = 0;
            while (X < this.Activations[this.Activations.Count - 1].Count)
            {
                this.Errors[this.Errors.Count - 1][X] = this.Activations[this.Activations.Count - 1][X] - Outputs[X];

                Y = 0;
                while (Y < this.Weights[this.Weights.Count - 1][X].Count)
                {
                    Delta = MSE * this.ActivationFunctionDerivative(this.Activations[this.Activations.Count - 1][X], this.ActivationFunctions[this.ActivationFunctions.Count - 1]) * this.Activations[this.Activations.Count - 2][Y];

                    if (TrainWeights)
                    {
                        this.Weights[this.Weights.Count - 1][X][Y] = this.Weights[this.Weights.Count - 1][X][Y] - ((this.LearningRate * Delta) + (this.Momentum * this.PrevWeights[this.PrevWeights.Count - 1][X][Y]));
                        this.PrevWeights[this.PrevWeights.Count - 1][X][Y] = Delta;
                    }

                    Y++;
                }

                X++;
            }

            X = this.Activations.Count - 2;

            while (X >= 0)
            {
                Y = 0;
                while (Y < this.Activations[X].Count)
                {
                    Delta = 0;
                    Z = 0;

                    while (Z < this.Activations[X + 1].Count)
                    {
                        Delta += this.Errors[X + 1][Z] * this.ActivationFunctionDerivative(this.Activations[X + 1][Z], this.ActivationFunctions[X + 1]) * this.Weights[X + 1][Z][Y];

                        Z++;
                    }

                    this.Errors[X][Y] = Delta;

                    Z = 0;
                    while (Z < this.Weights[X][Y].Count)
                    {
                        Delta = this.Errors[X][Y] * this.ActivationFunctionDerivative(this.Activations[X][Y], this.ActivationFunctions[X]) * this.Activations[Math.Max(0, X - 1)][Z];

                        if (TrainWeights)
                        {
                            this.Weights[X][Y][Z] = this.Weights[X][Y][Z] - ((this.LearningRate * Delta) + (this.Momentum * this.PrevWeights[X][Y][Z]));
                            this.PrevWeights[X][Y][Z] = Delta;
                        }

                        Z++;
                    }

                    Y++;
                }

                X--;
            }
        }

        public void ExportNetwork(string FilePath)
        {
            int X = 0;
            int Y = 0;
            int Z = 0;
            StringBuilder StrBld = new StringBuilder();

            
        }

        public void BackPropagateError(List<double> Inputs)
        {
            int X = 0;
            int Y = 0;
            int Z = 0;
            double Delta = 0;
            double NewDelta = 0;
            double MSE = 0;

            while(X <Inputs.Count)
            {
                MSE += Math.Pow(Inputs[X],2);

                X++;
            }

            MSE /= Inputs.Count;

            //MSE = Math.Sqrt(MSE);

            this.MeanSquaredError = MSE;

            X = 0;

            while (X < this.Activations[this.Activations.Count - 1].Count)
            {
                this.Errors[this.Errors.Count - 1][X] =(Inputs[X]);

                Y = 0;
                while (Y < this.Weights[this.Weights.Count - 1][X].Count)
                {
                    Delta = MSE * this.ActivationFunctionDerivative(this.Activations[this.Activations.Count - 1][X], this.ActivationFunctions[this.ActivationFunctions.Count - 1]) * this.Activations[this.Activations.Count - 2][Y];

                    

                    this.Weights[this.Weights.Count - 1][X][Y] = this.Weights[this.Weights.Count - 1][X][Y] - (this.LearningRate * Delta);
                    this.PrevWeights[this.PrevWeights.Count - 1][X][Y] = Delta;

                    Y++;
                }

                X++;
            }

            X = this.Activations.Count - 2;

            while (X >= 0)
            {
                Y = 0;
                while (Y < this.Activations[X].Count)
                {
                    Delta = 0;
                    Z = 0;

                    while (Z < this.Activations[X + 1].Count)
                    {
                        Delta += this.Errors[X + 1][Z] * this.ActivationFunctionDerivative(this.Activations[X + 1][Z], this.ActivationFunctions[X + 1]) * this.Weights[X + 1][Z][Y];

                        Z++;
                    }

                    //NewDelta = Delta;

                    this.Errors[X][Y] = Delta;

                    Z = 0;
                    while (Z < this.Weights[X][Y].Count)
                    {
                        NewDelta = Delta * this.ActivationFunctionDerivative(this.Activations[X][Y], this.ActivationFunctions[X]) * this.Activations[Math.Max(0, X - 1)][Z];
                       
                        this.Weights[X][Y][Z] = this.Weights[X][Y][Z] - (this.LearningRate * NewDelta);

                        this.PrevWeights[X][Y][Z] = NewDelta;

                        Z++;
                    }

                    Y++;
                }

                X--;
            }
        }

        public double CalculateStandardDeviation(List<double> Inputs, double Mean = 0.0f)
        {
            double Variance = 0;
            int X = 0;

            if (Mean == 0)
            {
                while (X < Inputs.Count)
                {
                    Mean += Inputs[X];

                    X++;
                }

                Mean /= Inputs.Count;
            }

            X = 0;
            while (X < Inputs.Count)
            {
                Variance += Math.Pow(Inputs[X] - Mean, 2);

                X++;
            }

            Variance /= Inputs.Count;

            return Math.Sqrt(Variance);
        }

        public double ZScore(List<double> Inputs, double SamplePoint, double Mean = 0.0f)
        {
            int X = 0;

            if (Mean == 0)
            {
                while (X < Inputs.Count)
                {
                    Mean += Inputs[X];

                    X++;
                }

                Mean /= Inputs.Count;
            }

            return (SamplePoint - Mean) / CalculateStandardDeviation(Inputs);
        }

        public List<double> NormalizeDataSet(List<double> Inputs, int NormalizationMethodID)
        {
            int X = 0;
            int Y = 0;
            double TempVal = 0;
            List<double> TempList = new List<double>();
            int MinibatchSize = 25;
            double StdDev = 0;
            List<double> Outputs = new List<double>();
            double MinVal = 0;
            double MaxVal = 0;
            double Mean = 0;

            switch (NormalizationMethodID)
            {
                //TanH
                case 0:
                    while (X < Inputs.Count)
                    {
                        Inputs[X] = Math.Tanh(Inputs[X]);

                        X++;
                    }

                    break;
                //Sigmoid
                case 1:
                    while (X < Inputs.Count)
                    {
                        TempVal = Math.Exp(Inputs[X]);
                        Inputs[X] = TempVal / (TempVal + 1);

                        X++;
                    }

                    break;
                //Softmax
                case 2:
                    while (X < Inputs.Count)
                    {
                        TempVal += Math.Exp(Inputs[X]);

                        X++;
                    }

                    X = 0;

                    while (X < Inputs.Count)
                    {
                        Inputs[X] = Math.Exp(Inputs[X]) / TempVal;

                        X++;
                    }

                    break;
                //Raw Average
                case 3:
                    while (X < Inputs.Count)
                    {
                        TempVal += Inputs[X];

                        X++;
                    }

                    X = 0;

                    while (X < Inputs.Count)
                    {
                        Inputs[X] = Inputs[X] / TempVal;

                        X++;
                    }

                    break;
                //Z-Score
                case 4:
                    X = 0;
                    Mean = 0;
                    TempList = new List<double>();
                    while (X < Inputs.Count)
                    {
                        if (Y + X >= Inputs.Count)
                        {
                            break;
                        }
                        TempList.Add((Inputs[Y + X]));
                        Mean += (Inputs[Y + X]);

                        X++;
                    }

                    Mean /= TempList.Count;
                    StdDev = CalculateStandardDeviation(TempList, Mean);



                    X = 0;
                    while (X < TempList.Count)
                    {
                        if (StdDev == 0)
                        {
                            Outputs.Add(0);
                        }
                        else
                        {
                            Outputs.Add((TempList[X] - Mean) / StdDev);
                        }

                        X++;
                    }


                    Inputs = Outputs;

                    break;
                case 5:
                    
                    X = 0;
                    while (X < Inputs.Count)
                    {
                        Inputs[X] = (Inputs[X] - 0.255) / 0.255;

                        X++;
                    }

                    X = 0;
                    while(X < Inputs.Count)
                    {
                        Inputs[X] = (Inputs[X] * 0.255);

                        X++;
                    }

                    break;
            }

            return Inputs;
        }

        public double ActivationFunction(double Input, int ActivationFunctionID)
        {
            double TempVal = 0.0f;
            int X = 0;

            switch (ActivationFunctionID)
            {
                //TanH
                case 0:
                    TempVal = Math.Tanh(Input);

                    break;
                //Sigmoid
                case 1:
                    TempVal = 1 / (1 + Math.Pow(Math.E, -1 * Input));

                    break;
                //ELU
                case 2:
                    if (Input > 0)
                    {
                        TempVal = Input;
                    }
                    else
                    {
                        TempVal = 0.0001f * (Math.Exp(Input) - 1);
                    }

                    break;
                //ReLU
                case 3:
                    if (Input >= 0)
                    {
                        TempVal = Input;
                    }
                    else
                    {
                        TempVal = this.ReLUConst * Input;
                    }


                    //TempVal = Math.Max(0, Input);

                    break;

                case 4:
                    TempVal = Input;

                    break;
            }

            if (double.IsNaN(TempVal) || double.IsInfinity(TempVal))
            {
                Debug.Print("WARNING: NaN activation detected in network!");
            }

            return TempVal;
        }

        public double ActivationFunctionDerivative(double Input, int ActivationFunctionID)
        {
            double TempVal = 0.0f;

            switch (ActivationFunctionID)
            {
                case 0:
                    TempVal = Math.Tanh(Input);
                    TempVal = (1 - (TempVal * TempVal));

                    break;

                case 1:
                    TempVal = this.ActivationFunction(Input, 1);
                    TempVal = TempVal * (1 - TempVal);

                    break;

                case 2:
                    if (Input > 0)
                    {
                        TempVal = 1;
                    }
                    else
                    {
                        TempVal = Math.Exp(Input);
                        TempVal = 0.0001f * TempVal;
                    }

                    break;

                case 3:
                    if (Input >= 0)
                    {
                        TempVal = 1;
                    }
                    else
                    {
                        //TempVal = 0;
                        TempVal = this.ReLUConst;
                    }

                    break;

                case 4:

                    TempVal = 1;
                    break;
                
                case 5:

                    TempVal = 2 / this.Activations[this.Activations.Count - 1].Count * Input;
                    break;
            }

            return TempVal;
        }
    }
}
